package com.bangnhi.server.controller;

import com.bangnhi.server.jwt.CustomUserDetails;
import com.bangnhi.server.jwt.JwtTokenProvider;
import com.bangnhi.server.model.JWT;
import com.bangnhi.server.model.User;
import com.bangnhi.server.repository.JWTRepository;
import com.bangnhi.server.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

@RestController
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private JWTRepository jwtRepository;

    @Autowired
    PasswordEncoder passwordEncoder;

    @Autowired
    AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenProvider tokenProvider;
    
    @GetMapping("/")
    public @ResponseBody String hello() {
        return "Hello";
    }

    @PostMapping(path="/dangky") // Map ONLY POST Requests
    public @ResponseBody
    ResponseEntity<String> register (@RequestParam String username, @RequestParam String password, @RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if (username.isEmpty()) {
            return new ResponseEntity<>("Username is Empty!", null, HttpStatus.BAD_REQUEST);
        }
        if (password.isEmpty()) {
            return new ResponseEntity<>("Password is Empty!", null, HttpStatus.BAD_REQUEST);
        }
        if (name.isEmpty()) {
            return new ResponseEntity<>("Name is Empty!", null, HttpStatus.BAD_REQUEST);
        }
        if (email.isEmpty()) {
            return new ResponseEntity<>("Email is Empty!", null, HttpStatus.BAD_REQUEST);
        }
        if (userRepository.findByUsername(username) != null) {
            return new ResponseEntity<>("User already exists!", null, HttpStatus.BAD_REQUEST);
        }
        if (userRepository.findByEmail(email) != null) {
            return new ResponseEntity<>("Email already exists!", null, HttpStatus.BAD_REQUEST);
        }

        User newUser = new User(name, username, passwordEncoder.encode(password), email, false);
        userRepository.save(newUser);
        return new ResponseEntity<>("Success", null, HttpStatus.OK);
    }

    @PostMapping("/dangnhap")
    public ResponseEntity<String> authenticateUser(@RequestParam String username, @RequestParam String password) {

        if (username.isEmpty()) {
            return new ResponseEntity<>("Username is Empty!", null, HttpStatus.BAD_REQUEST);
        }
        if (password.isEmpty()) {
            return new ResponseEntity<>("Password is Empty!", null, HttpStatus.BAD_REQUEST);
        }
        // Xác thực thông tin người dùng Request lên
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        username,
                        password
                )
        );

        // Nếu không xảy ra exception tức là thông tin hợp lệ
        // Set thông tin authentication vào Security Context
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Trả về jwt cho người dùng.
        String jwt = tokenProvider.generateToken((CustomUserDetails) authentication.getPrincipal());
        //Luu token(jwt) hop le vao database
        JWT token = new JWT(jwt);
        jwtRepository.save(token);
        return new ResponseEntity<>(jwt, null, HttpStatus.OK);
    }

    @GetMapping(path="/danhsach")
    public @ResponseBody Iterable<User> getAllUsers() { // Lay thong tin tat ca nguoi dung
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping("/dangxuat")
    @Transactional
    public @ResponseBody ResponseEntity<String> logout(@RequestParam String token) {
        if (StringUtils.hasText(token) && (jwtRepository.findByToken(token) != null)) {
            // Neu co trong database thi xoa token khoi database (bo kich hoat)
            jwtRepository.deleteByToken(token);
        } else {
            return new ResponseEntity<>("Failed!", null, HttpStatus.BAD_REQUEST);
        }
        return new ResponseEntity<>("Logout Success", null, HttpStatus.OK);
    }
}
